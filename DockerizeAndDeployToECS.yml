# This file defines an Azure DevOps pipeline that builds, tests, and Dockerizes
# an ASP.NET Framework application as a Windows container and then deploys it to Amazon ECS.

trigger:
  branches:
    include:
    - main
    - develop

resources:
  - repo: self

variables:
  - name: 'ecsClusterName'
    value: 'tipstaff_cluster'
  - name: 'ecsServiceName'
    value: 'tipstaff'
  - name: 'dockerfilePath'
    value: 'Dockerfile'
  - name: 'awsEcrRepository'
    value: '913862848426.dkr.ecr.eu-west-2.amazonaws.com/tipstaff-ecr-repo'
  - name: 'awsEcrRegion'
    value: 'eu-west-2'
  - name: imageName
    value: tipstaff-image

stages:
- stage: BuildAndTest
  displayName: 'Build and Test Application'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'

    - task: VSBuild@1
      inputs:
        solution: '**/*.sln'
        configuration: 'Release'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish WebApp.zip Artifact'
      inputs:
        PathtoPublish: '$(build.artifactStagingDirectory)\WebApp.zip'
        ArtifactName: 'WebApp'
        publishLocation: 'Container'

- stage: DockerizeAndDeploy
  displayName: 'Dockerize and Deploy to AWS ECS'
  jobs:
  - job: DockerizeAndDeploy
    displayName: 'Dockerize and Deploy'
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download WebApp.zip Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'WebApp'
        downloadPath: '$(Build.SourcesDirectory)'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        buildContext: '$(Build.SourcesDirectory)\WebApp'
        tags: |
          $(awsEcrRepository):$(Build.BuildId)

    - task: ECRPushImage@1
      displayName: 'Push image to ECR'
      inputs:
        awsCredentials: 'AWS-Tipstaff-Dev-Connection'
        regionName: $(awsEcrRegion)
        imageSource: 'imagename'
        sourceImageName: $(imageName)
        sourceImageTag: $(Build.BuildId)
        pushTag: latest
        repositoryName: 'tipstaff-ecr-repo'

    - task: AmazonWebServices.aws-vsts-tools.AWSShellScript.AWSShellScript@1
      displayName: 'Update ECS Service'
      inputs:
        awsCredentials: 'AWS-Tipstaff-Dev-Connection'
        regionName: '$(awsEcrRegion)'
        scriptType: 'inline'
        inlineScript: |
          # Register a new task definition
          $(aws) ecs register-task-definition --cli-input-json file://$(taskDefinitionFile)

          # Update the ECS service with the new task definition
          $(aws) ecs update-service --cluster $(ecsClusterName) --service $(ecsServiceName) --task-definition $(Build.Repository.Name) --force-new-deployment
