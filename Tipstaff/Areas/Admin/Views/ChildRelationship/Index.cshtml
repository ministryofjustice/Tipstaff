@model Tipstaff.Models.ChildRelationshipListView

@{
    ViewBag.Title = "Index of child relationships";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head
{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <style type="text/css">
        form {display:inline;}
    </style>
}
<h6>@Html.ActionLink("Administration", "Index", "Admin") 
> @Html.ActionLink("Lookups", "Lookups", "Admin") 
> Child Relationships</h6>


<table>
    <tr>
        <th>
            @Html.LabelFor(model => model.ChildRelationships.First().Detail)
        </th>
        <th>
            @Html.LabelFor(model => model.ChildRelationships.First().active)
        </th>
    </tr>
@{var isAltRow = false;
  foreach (var item in Model.ChildRelationships)
    {
    <tr class="@( isAltRow ? "altRow" : "")">
        
		
        <td>
            @Html.DisplayFor(modelItem => item.Detail)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.active)
        </td>
    </tr>
    isAltRow = !isAltRow;
    }
}
</table>
@{
    var token = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex = token.IndexOf("value=\"") + 7;
    var endIndex = token.IndexOf("\"", beginIndex);
    token = token.Substring(beginIndex, endIndex - beginIndex);

}


@Html.SSGPaging("Index", "ChildRelationship", Model, Model.ChildRelationships, token)
