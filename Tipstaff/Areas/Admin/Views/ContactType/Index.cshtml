@model Tipstaff.Models.ContactTypeListView

@{
    ViewBag.Title = "Contact types";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head
{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <style type="text/css">
        form {display:inline;}
    </style>
}
<h1>@ViewBag.Title</h1>
<h6>@Html.ActionLink("Administration", "Index", "Admin") 
> @Html.ActionLink("Lookups", "Lookups", "Admin") 
> Contact types</h6>

<p>

	@Html.ImageAndTextLink(Url.Content("~/Images/add.png"), "Create new contact type", "Create new contact type", "Create", null, null, null, null, "createButton")

</p>
<table>
    <tr>
        <th colspan="3" style="text-align:right;">
            @Html.HiddenFor(model => model.onlyActive)<label for="includeFake">Hide deleted entries?</label>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                switch (Model.onlyActive)
                {
                    case true:
                        <input name="onlyActive" type="hidden" value="false" />
                        <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="true" checked="checked" />
                        break;
                    case false:
                        <input name="onlyActive" type="hidden" value="true" />
                        <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="false" />
                        break;
                    default:
                        break;
                }
            }
        </th>
    </tr>

    <tr>
        <th></th>
        <th>
            @Html.LabelFor(model=>model.ContactTypes.First().Detail)
        </th>
        <th>
            @Html.LabelFor(model=>model.ContactTypes.First().active)
        </th>
    </tr>

@{var isAltRow = false;
	foreach (var item in Model.ContactTypes) {
    <tr class="@(isAltRow ? "altRow" : "")">
        <td width="60px">
            @Html.ImageLink(Url.Content("~/Images/edit.png"), "Edit", "Edit", "ContactType", new { id = item.contactTypeID }, null, null)
            @Html.ImageLink(Url.Content("~/Images/delete.png"), "Deactivate", "Deactivate", "ContactType", new { id = item.contactTypeID }, null, null) 
            @Html.ImageLink(Url.Content("~/Images/Audit.png"), "Audit", "Audit", "Audit", new { area="", auditType="ContactType", id = item.contactTypeID }, null, null) 
        </td>
        <td>
            @Html.ImageAndTextLink(Url.Content("~/Images/view.png"),item.Detail, string.Format("Details for {0}",item.Detail), "Details", "ContactType", new { id = item.contactTypeID }, null, null, "createButton")
        </td>
        <td style="text-align:center;">
            @Html.DisplayFor(modelitem=>item.active)
        </td>
    </tr>
    isAltRow = !isAltRow;
	}
}
</table>
@{
    var token = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex = token.IndexOf("value=\"") + 7;
    var endIndex = token.IndexOf("\"", beginIndex);
    token = token.Substring(beginIndex, endIndex - beginIndex);

}
@Html.SSGPaging("Index", "ContactType", Model, Model.ContactTypes, token)
