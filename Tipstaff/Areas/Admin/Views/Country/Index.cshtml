@model Tipstaff.Models.CountryListView

@{
    ViewBag.Title = "Countries index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head
{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <style type="text/css">
        form {display:inline;}
    </style>
}
<h6>@Html.ActionLink("Administration", "Index", "Admin") 
> @Html.ActionLink("Lookups", "Lookups", "Admin") 
> Countries</h6>

<p>

	@Html.ImageAndTextLink(Url.Content("~/Images/add.png"), "Create new country", "Create new country", "Create", null, null, null, null, "createButton")

</p>
<table>
    <tr>
        <th colspan="2" style="text-align:right;vertical-align:middle;">
        Countries containing 
        @using (Html.BeginForm())
           {    
            @Html.AntiForgeryToken()
            @Html.TextBox("detailContains", null, new { @style = "width: 3em;", AccessKey = "F" })
                            <input alt="Filter Country" type="image" value="Search" src="@Url.Content("~/Images/view.png")"/>
            @Html.HiddenFor(model => model.onlyActive)
        }
        </th>
        <th colspan="3">
        @Html.HiddenFor(model => model.onlyActive)<label for="includeFake">Hide deactivated entries?</label> 
        @using (Html.BeginForm())
        {    
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model=>model.detailContains)
            switch (Model.onlyActive)
            {
            case true:
                <input name="onlyActive" type="hidden" value="false" />
                <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="true" checked="checked"/>
                break;
            case false:
                <input name="onlyActive" type="hidden" value="true" />
                <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="false" />
                break;
            default:
                break;
            }
        }
        </th>
    </tr>

    <tr>
        <th></th>
        <th>
            @Html.LabelFor(model=>model.Countries.First().Detail)
        </th>
        <th>
            @Html.LabelFor(model => model.Countries.First().active)
        </th>
        <th>
            @Html.LabelFor(model => model.Countries.First().deactivated)
        </th>
        <th>
            @Html.LabelFor(model => model.Countries.First().deactivatedBy)
        </th>
    </tr>

@{	var isAltRow = false;
	foreach (var item in Model.Countries) {
    <tr class="@(isAltRow ? "altRow" : "")">
        <td style="text-align:right;">
            @if (item.active)
            {
            @Html.ImageLink(Url.Content("~/Images/edit.png"), "Edit", "Edit", "Country", new { id = item.countryID }, null, null)
            @Html.ImageLink(Url.Content("~/Images/delete.png"), "Deactivate", "Deactivate", "Country", new { id = item.countryID }, null, null) 
            }
            @Html.ImageLink(Url.Content("~/Images/Audit.png"), "Audit", "Audit", "Audit", new { area="", auditType="Country", id = item.countryID }, null, null) 
        </td>
		
        <td>
            @Html.ImageAndTextLink(Url.Content("~/Images/view.png"),item.Detail, string.Format("Details for {0}",item.Detail), "Details", "Country", new { id = item.countryID }, null, null, "createButton")
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.active)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.deactivated)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.deactivatedBy)
        </td>
    </tr>
	isAltRow = !isAltRow;
	}
}
</table>
@{
    var token = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex = token.IndexOf("value=\"") + 7;
    var endIndex = token.IndexOf("\"", beginIndex);
    token = token.Substring(beginIndex, endIndex - beginIndex);

}
@Html.SSGPaging("Index", "Country", Model, Model.Countries, token)

