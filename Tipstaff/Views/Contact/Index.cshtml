@model Tipstaff.Models.ContactListView

@{
    ViewBag.Title = "Contacts";
}
@section head
{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <style type="text/css">
        form {display:inline;}
    </style>
}

<h1>Contacts</h1>
<p>@Html.ImageAndTextLink(Url.Content("~/Images/add.png"), "Create new Contact", "Create new Contact", "Create", null, null, null, null, "createButton")</p>
<table style="width:100%;">
    <tr>
        <th>Filters</th>
        <th style="white-space:nowrap">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.ContactTypeID)
                @Html.TextBox("NameContains", null, new { @style = "width: 9em;", AccessKey = "F" })
                <input alt="Filter case numbers" type="image" value="Search" src="@Url.Content("~/Images/view.png") "/>
            }
        </th>
        <th colspan="6">&nbsp;</th>
        <th style="white-space:nowrap;">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.NameContains)
                @Html.DropDownListForWithSubmit(model => model.ContactTypeID, (SelectList)Model.ContactTypeList, "All types", "-1")
            }
        </th>
    </tr>
    <tr>
        <th style="min-width:20px;width:20px;"></th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().fullName)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().MultiLineAddress)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().DX)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().phoneHome)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().phoneMobile)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().email)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().notes)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().contactType)
        </th>
        <th>
            @Html.LabelFor(model => model.Contacts.First().Retention)
        </th>
    </tr>

@{var isAltRow = false;
    foreach (var item in Model.Contacts) {
    <tr class="@(isAltRow ? "altRow" : "")">
        <td style="min-width:40px;">
            @Html.ImageLink(Url.Content("~/Images/edit.png"), "Edit", "Edit", "Contact", new { id = item.contactID }, null, null)
            @if (User.IsInRole("Admin"))
            {@Html.ImageLink(Url.Content("~/Images/Audit.png"), "Audit", "Audit", "Audit", new { auditType = "Contact", id = item.contactID }, null, null)}
        </td>
        <td>
            @Html.ImageAndTextLink(Url.Content("~/Images/view.png"), item.PoliceDisplayName, string.Format("View {0}", item.fullName), "Details", "Contact", new { id = item.contactID }, null, null, "createButton")
        </td>
        <td>
            @Html.Raw(item.MultiLineAddress)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DX)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.phoneHome)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.phoneMobile)
        </td>
        <td>
            <a class="createButton" style="color:#3399ff;"
               title="Send mail to @Html.DisplayFor(modelItem => item.email)"
               href="mailto:@Html.DisplayFor(modelItem => item.email)?subject=Tipstaff query">@Html.DisplayFor(modelItem => item.email)</a>

        </td>
        <td>
            @Html.DisplayFor(modelItem => item.notes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.contactType.Detail)
        </td>
        <td>
            @if (item.Retention)
            {
                @Html.Raw("Yes");
            }
            else
            {
                @Html.Raw("No");
            }
        </td>
    </tr>
        isAltRow = !isAltRow;
    }
}
</table>

@{ 
    var token = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex = token.IndexOf("value=\"") + 7;
    var endIndex = token.IndexOf("\"", beginIndex);
    token = token.Substring(beginIndex, endIndex - beginIndex);

}

@Html.SSGPaging("Index", "Contact", Model, Model.Contacts, token)