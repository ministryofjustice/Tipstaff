@model Tipstaff.Models.WarrantListViewModel
@using PagedList.Mvc 
@{
    ViewBag.Title = "Warrants Index";
}
@section head
{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <style type="text/css">
        form {display:inline;}
    </style>
}
<h6>Warrants</h6>
<table style="width:100%">
    <tr>@*Filter Row*@
        <th @if (User.IsInRole("Admin")) {@Html.Raw("colspan=\"2\"")}>Filters</th>
        <th style="white-space:nowrap">        
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.caseStatusID)
                @Html.HiddenFor(model => model.divisionID)
                @Html.HiddenFor(model => model.respondentNameContains)
                @Html.TextBox("caseNumberContains", null, new { @style = "width: 5em;", AccessKey = "F" })
                <input alt="Filter case numbers" type="image" value="Search" src="@Url.Content("~/Images/view.png") "/>
            }
        </th>
        <th style="white-space:nowrap;width:14em;">        
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken(); 
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.caseStatusID)
                @Html.HiddenFor(model => model.divisionID)
                @Html.HiddenFor(model => model.caseNumberContains)
                @Html.TextBox("respondentNameContains", null, new { @style = "width: 7em;", AccessKey = "F" })
                <input alt="Filter respondents name" type="image" value="Search" src="@Url.Content("~/Images/view.png") "/>
            }
        </th>
        <th colspan="2">&nbsp;</th> @* Empty columns *@
        <th style="white-space:nowrap;">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.respondentNameContains)
                @Html.HiddenFor(model => model.caseStatusID)
                @Html.HiddenFor(model => model.caseNumberContains)
                @Html.DropDownListForWithSubmit(model => model.divisionID, (SelectList)Model.DivisionList, "All", "-1")
            }
        </th>
        <th colspan="2">&nbsp;</th> @* Empty columns *@
        <th style="white-space:nowrap;">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.HiddenFor(model => model.sortOrder)
                @Html.HiddenFor(model => model.includeFinal)
                @Html.HiddenFor(model => model.respondentNameContains)
                @Html.HiddenFor(model => model.divisionID)
                @Html.HiddenFor(model => model.caseNumberContains)
                @Html.DropDownListForWithSubmit(model => model.caseStatusID, (SelectList)Model.StatusList, "All statuses", "-1")
            }
        </th>
        <th>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken();
            @Html.HiddenFor(model => model.sortOrder)
            @Html.HiddenFor(model => model.respondentNameContains)
            @Html.HiddenFor(model => model.caseStatusID)
            @Html.HiddenFor(model => model.divisionID)
            @Html.HiddenFor(model => model.caseNumberContains)
            @Html.HiddenFor(model => model.sortOrder)<label for="includeFake">Resolved cases?</label> 
            switch (Model.includeFinal)
            {
                case true:
                    <input name="includeFinal" type="hidden" value="false" />
                    <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="true" checked="checked"/>
                    break;
                case false:
                    <input name="includeFinal" type="hidden" value="true" />
                    <input onClick="$(this).parent(&#39;form:first&#39;).submit();" id="includeFake" name="includeFake" type="checkbox" value="false" />
                    break;
                default:
                    break;
            }
        }
        </th>
        <th @if (User.IsInRole("Admin"))
            {@Html.Raw("colspan=\"2\"")}>&nbsp;</th> @* Empty columns *@
    </tr>@* End Filter Row*@
    <tr> @* HeaderRow *@
        @if (User.IsInRole("Admin"))
        {<th style="width:20px;">&nbsp;</th>}
        @{
            var token = @Html.AntiForgeryToken().ToHtmlString();

            var beginIndex = token.IndexOf("value=\"") + 7;
            var endIndex = token.IndexOf("\"", beginIndex);
            token = token.Substring(beginIndex, endIndex - beginIndex);

        }
        @Html.SortHeader(Model, "uniqueid", "Unique record ID", token)
        @Html.SortHeader(Model, "casenumber", "Case Number", token)
        @*<th>Full name of respondent</th>*@
        @Html.SortHeader(Model, "displayName", "Full name of respondent", "14em", token)
        @Html.SortHeader(Model, "reviewDate", "Next review date", token)
        @Html.SortHeader(Model, "expiryDate", "Expiry Date ", token)
        @Html.SortHeader(Model, "division", "Division", token)
        @Html.SortHeader(Model, "created", "Created", token)
        @Html.SortHeader(Model, "protMark", "Protective Marking", token)
        @Html.SortHeader(Model, "caseStatus", "Current case status", token)
        @Html.SortHeader(Model, "result", "Result", token)
        @Html.SortHeader(Model, "resultEnter", "Result entered by", token)
        @if (User.IsInRole("Admin"))
        {<th style="width:20px;">&nbsp;</th>}
    </tr>@* End HeaderRow *@
@{var isAltRow = false;
  foreach (var item in Model.Warrants)
  {
    <tr class="@(isAltRow ? "altRow" : "")">@* Data Row *@
        @if (User.IsInRole("Admin"))
        {
        <td>
            @Html.ImageLink(Url.Content("~/Images/Audit.png"), "Audit", "Audit", "Audit", new { area = "", auditType = "Warrant", id = item.tipstaffRecordID }, null, null)
        </td>
        }
        <td>@Html.ImageAndTextLink(Url.Content("~/Images/view.png"), item.UniqueRecordID, string.Format("View {0}", item.UniqueRecordID), "Details", "Warrant", new { id = item.tipstaffRecordID }, null, null, "createButton")</td>
        <td>@Html.DisplayFor(modelItem => item.caseNumber)</td>
        <td style="width:14em";>@Html.DisplayFor(modelItem => item.RespondentName)</td>
        <td>@if (item.resultID == null)
            { 
            <span class="@((item.nextReviewDate <= DateTime.Today) ? "alert" : "")">@Html.DisplayFor(modelItem => item.nextReviewDate)</span>
            }
            else
            {
            @Html.Raw("&nbsp");
            }</td>
        <td>@Html.DisplayFor(modelItem => item.expiryDate)</td>
        <td>@Html.DisplayFor(modelItem => item.division.Detail)</td>
        <td>@Html.DisplayFor(modelItem => item.createdBy) on @item.createdOn.Value.ToShortDateString()</td>
        <td>@Html.DisplayFor(modelItem => item.protectiveMarking.Detail)</td>
        <td>@Html.DisplayFor(modelItem => item.caseStatus.Detail)</td>
        @if (item.resultID == null)
        {      
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        }
        else
        {
        <td>@Html.DisplayFor(modelItem => item.result.Detail)</td>
        <td>@Html.DisplayFor(modelItem => item.resultEnteredBy) on @(((DateTime)item.resultDate).ToShortDateString())</td>
        }
        @if (User.IsInRole("Admin"))
        {
        <td>
            @Html.ImageLink(Url.Content("~/Images/Delete.png"), string.Format("Delete {0}", item.UniqueRecordID), "Delete", "Warrant", new { id = item.tipstaffRecordID }, null, null)
        </td>
        }

    </tr>@* End Data Row *@
        isAltRow = !isAltRow;
  }
}
</table>
<div style="clear:both;float:left;display:block">

@{
    var token2 = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex2 = token2.IndexOf("value=\"") + 7;
    var endIndex2 = token2.IndexOf("\"", beginIndex2);
    token2 = token2.Substring(beginIndex2, endIndex2 - beginIndex2);

}
    @Html.SSGPaging("Index", "Warrants", Model, Model.Warrants, token2)
</div>
