@model Tipstaff.Models.ChooseSolicitorModel

@{
    ViewBag.Title = string.Format("Choose Solicitor for {0}", Model.tipstaffRecord.UniqueRecordID);
}
@section head{
    <link href="@Url.Content("~/Content/PagedList.css")" rel="stylesheet" type="text/css" media="screen" />
    <link href="@Url.Content("~/Content/newPagedListButtons.css")" rel="stylesheet" type="text/css" media="screen" />
    <script src="@Url.Content("~/Scripts/MicrosoftAjax.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/MicrosoftMvcAjax.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

    @functions{
        public string TokenHeaderValue()
        {
            string cookieToken, formToken;
            AntiForgery.GetTokens(null, out cookieToken, out formToken);
            return cookieToken + ":" + formToken;
        }
    }
    <script type="text/javascript">
        var TOKENHEADERVALUE = '@TokenHeaderValue()';

        $(document).ready(function () {

            $.ajaxSetup({
                headers: {
                    'AntiForgeryToken': TOKENHEADERVALUE
                },
            });
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            $("input[data-autocomplete-source]").each(function () {
                var target = $(this);
                target.autocomplete({
                    source: target.attr("data-autocomplete-source")
                });
            });
        });
    </script>
    <style type="text/css">
        form {
            display: inline;
        }
    </style>
}
@{
    string controller = genericFunctions.TypeOfTipstaffRecord(Model.tipstaffRecord.tipstaffRecordID);
    string display = controller == "Warrant" ? "Warrants" : "Child Abductions";
    string nameType = controller == "Warrant" ? "Contemnor" : "Respondent";
}
<h6>
    @Html.ActionLink(display, "Index", controller)
    > @Html.ActionLink(Model.tipstaffRecord.UniqueRecordID, "Details", controller, new { id = Model.tipstaffRecord.tipstaffRecordID }, null)
    > Add solicitor
</h6>

<table>
    <tr>
        @* Filter Row*@
        <th style="text-align:right;vertical-align:middle;">
            Solicitors containing:
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.TextBox("searchString", null, new { @style = "width: 3em;", AccessKey = "n" })
                <input alt="Filter Solicitor names" type="image" value="Search" src="@Url.Content("~/Images/view.png")" />
                @Html.HiddenFor(model => model.searchFirm)
            }
        </th>
        <th style="text-align:right;vertical-align:middle;">
            Solicitor firms containing:
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken();
                @Html.TextBox("searchFirm", null, new { @style = "width: 3em;", AccessKey = "f" })
                <input alt="Filter Solicitor firms" type="image" value="Search" src="@Url.Content("~/Images/view.png")" />
                @Html.HiddenFor(model => model.searchString)
            }
        </th>
        <th colspan="3">&nbsp;</th>
    </tr>
    <tr>
        @*Header row *@
        <th>
            @Html.LabelFor(model => model.pSolicitors.First().solicitorName)
        </th>
        <th>
            @Html.LabelFor(model => model.pSolicitors.First().SolicitorFirm.firmName)
        </th>
        <th>
            @Html.LabelFor(model => model.pSolicitors.First().phoneDayTime)
        </th>
        <th>
            @Html.LabelFor(model => model.pSolicitors.First().phoneOutofHours)
        </th>
        <th>
            @Html.LabelFor(model => model.pSolicitors.First().email)
        </th>
    </tr>
    @if ((Model == null) || (Model.pSolicitors.Count() == 0))
    {
        <tr><td colspan="5" class="altRow"><h6>No Solicitor records match the current search criteria or can be added at this time</h6></td></tr>
    }
    else
    {
        var isAltRow = false;
        foreach (var item in Model.pSolicitors)
        {
            <tr class="@(isAltRow ? "altRow" : "")">
                @* Data Row *@
                <td>
                    @Html.ImageAndTextLink(Url.Content("~/Images/add.png"), "Add " + item.solicitorName + " to " + Model.tipstaffRecord.UniqueRecordID, "Add " + item.solicitorName + " to " + Model.tipstaffRecord.UniqueRecordID, "Create", "TipstaffRecordSolicitor", new { tipstaffRecord = Model.tipstaffRecord.tipstaffRecordID, solicitor = item.solicitorID }, null, null, "createButton")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SolicitorFirm.firmName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.phoneDayTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.phoneOutofHours)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.email)
                </td>
            </tr>
            isAltRow = !isAltRow;
        }
    }
</table>
@{
    var token = @Html.AntiForgeryToken().ToHtmlString();

    var beginIndex = token.IndexOf("value=\"") + 7;
    var endIndex = token.IndexOf("\"", beginIndex);
    token = token.Substring(beginIndex, endIndex - beginIndex);

}
@Html.SSGPaging("Select", "Solicitor", Model, Model.pSolicitors, token)
<h2 style="clear:both;">Create a new solicitor?</h2>
@Html.AntiForgeryToken();
@Ajax.ImageActionLink(Url.Content("~/Images/add.png")
                                                     , "Create new Solicitor"
                                                     , "CreateSolicitor"
                                                     , "Solicitor"
                                                     , new { warrantID = Model.tipstaffRecord.tipstaffRecordID }
                                                     , new AjaxOptions
                                                         {
                                                             UpdateTargetId = "newSol",
                                                             LoadingElementId = "Refresh",
                                                             OnSuccess = "window.location.hash='newSol';"
                                                         }
                                                     , new { @class = "createButton" })

<img src="@Url.Content("~/Images/al_arrows_green.gif")" alt="loading..." id="Refresh" style="display:none" />
<a name="newSol" />
<div id="newSol"></div>
